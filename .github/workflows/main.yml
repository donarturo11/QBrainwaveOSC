# Workflow tuningTrainer
name: QBrainwaveOSC

on:
  pull_request:
    branches: [ ]
  push:
    branches: [ rewrite-workflow ]
  create:
      tags: ['v*'] # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:
      publish-www:
        description: 'Publish on WWW'
        required: false
        type: boolean
      publish-github:
        description: 'Publish on GitHub'
        required: false
        type: boolean
env:
  PKGNAME: QBrainwaveOSC
  IDENTITY_NAME: ${{ secrets.IDENTITY_NAME }}
  CMAKE_POLICY_VERSION_MINIMUM: 3.5
  CMAKE_BUILD_TYPE: Release

jobs:
  build-info:
    runs-on: ubuntu-latest
    outputs:
      name: ${{ env.PKGNAME }}
      version: ${{ steps.info.outputs.version }}
      date: ${{ steps.info.outputs.date }}
      build-tag: ${{ steps.info.outputs.build-tag }}
    steps:
      - uses: actions/checkout@v4
      - if: github.event_name == 'push'
        working-directory: ${{ github.workspace }}
        run: echo VERSION=$(git rev-parse --short HEAD) >> $GITHUB_ENV
      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') # this is a versioned build. check if release already exists
        run: echo VERSION=$(basename ${{ github.env }} >> $GITHUB_ENV
      - id: info
        run: |
          DATE=$(date +'%Y%m%d-%H%M')
          BUILD_TAG="${PKGNAME}-snapshot-${DATE}"
          echo "build-tag=${BUILD_TAG}" >> $GITHUB_OUTPUT
          echo "date=${DATE}" >> $GITHUB_OUTPUT
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
      - run: |
          echo "${{toJSON(github)}}"

  build:
    needs: build-info
    strategy:
      matrix:
        qt-version: [ 5, 6 ]
        name: [ "windows-msvc", "windows-mingw", "macos-arm64", "macos-x86_64", "linux", "linux-arm" ]
        include:
          - name: "windows-msvc"
            os: "windows-latest"
            toolchain: "msvc"
          - name: "windows-mingw"
            os: "windows-latest"
            toolchain: "mingw"
          - name: "macos-arm64"
            os: "macos-14"
          - name: "macos-x86_64"
            os: "macos-13"
          - name: "linux"
            os: "ubuntu-latest"
          - name: "linux-arm"
            os: "ubuntu-24.04-arm"
    runs-on: ${{matrix.os}}
    defaults:
      run:
        shell: bash
    steps:
    - name: info
      run: |
        echo "UNAME_S: $(uname -s)"
        echo "UNAME_O: $(uname -o)"
        echo "UNAME_M: $(uname -m)"
        echo '${{ toJSON(needs) }}'
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Install the Apple certificate and provisioning profile
      if: ${{runner.os == 'macOS'}}
      env:
          P12_CERTIFICATE_BASE64: ${{ secrets.P12_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$P12_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign -T /usr/bin/productsign
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security find-identity
    - name: Prepare workspace
      env:
        PROFILE_NAME: ${{ matrix.name }}
        QT_VERSION: ${{ matrix.qt-version }}
        PKGVERSION: ${{ needs.build-info.outputs.version }}
        DATE: ${{ needs.build-info.outputs.date }}
      run: |
        cd $GITHUB_WORKSPACE
        echo "::group::Fetch scripts"
        curl -L https://freeshell.de/arturwro/pub/QBrainwaveOSC-scripts.tar.gz | tar -vxz
        cd $GITHUB_WORKSPACE/buildscripts
        echo SCRIPTS_DIR=$(pwd) >> $GITHUB_ENV
        echo PKGVERSION=$PKGVERSION >> $GITHUB_ENV
        echo "::endgroup::"
    - name: Setup environment
      env:
        PROFILE_NAME: ${{ matrix.name }}
        QT_VERSION: ${{ matrix.qt-version }}
      run: |
        ${SCRIPTS_DIR}/setup_environment.sh
        cat $GITHUB_WORKSPACE/build.env >> $GITHUB_ENV
        rm  $GITHUB_WORKSPACE/build.env
        cat $GITHUB_ENV
#    - name: Set up Visual Studio shell
#      if: ${{ matrix.toolchain == 'msvc' }}
#      uses: egor-tensin/vs-shell@v2
#      with:
#        arch: x64
    - name: Install dependencies
      run: ${SCRIPTS_DIR}/install_dependencies.sh
    - name: Configure & compile
      run: ${SCRIPTS_DIR}/compile.sh
    - name: Create package
      run: ${SCRIPTS_DIR}/package.sh
    - uses: actions/upload-artifact@v4
      with:
        name: ${{env.FULL_PKGNAME}}
        path: ${{github.workspace}}/out*
  publish:
    needs: build
    #if: github.event_name != 'pull_request' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Setup environment
        run: |
          echo ARTIFACTS_DIR=$RUNNER_WORKSPACE/artifacts >> $GITHUB_ENV
          set -a; source $GITHUB_ENV; set +a
          [[ ! -e $ARTIFACTS_DIR ]] && mkdir $ARTIFACTS_DIR

      - name: Get Build Tag
        id: get_tag
        run: |
          DATE=$(date +'%Y%m%d-%H%M')
          BUILD_TAG="${PKGNAME}-snapshot-${DATE}"
          echo "BUILD_TAG=${BUILD_TAG}" >> $GITHUB_OUTPUT
          echo DATE=$DATE >> $GITHUB_ENV

      - name: Get artifacts
        uses: actions/download-artifact@v4
        with:
          path: ${{runner.workspace}}/artifacts-temp

      - name: Flat structure
        run: |
          find $RUNNER_WORKSPACE/artifacts-temp -type f \
            -exec mv -v {} $ARTIFACTS_DIR \;

      - if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') # this is a snapshot build. create a release and upload binaries
        name: Create Snapshot Release
        uses: softprops/action-gh-release@v2
        with:
          name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          tag_name: ${{ steps.get_tag.outputs.BUILD_TAG }}
          generate_release_notes: true
          prerelease: true
          files: |
            ${{runner.workspace}}/artifacts/*

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') # this is a versioned build. check if release already exists
        name: Find Existing Release
        id: find_release
        uses: cardinalby/git-get-release-action@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          doNotFailIfNotFound: true
          tag: ${{ github.ref_name }}

      - if: github.event_name == 'create' && startsWith(github.ref, 'refs/tags/v') && steps.find_release.outputs.id != 0 # otherwise release does not exist, create one and upload binaries
        name: Create Tagged Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
          prerelease: false
          files: |
            ${{runner.workspace}}/artifacts/*

      - name: Pack all artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.PKGNAME}}-snapshot-${{github.ref_name}}-${{ env.DATE }}
          path: ${{env.ARTIFACTS_DIR}}
